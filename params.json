{
  "name": "Shark",
  "tagline": "轻量级的分布式mysql分库分表中间件",
  "body": "![](http://dl.iteye.com/upload/picture/pic/135281/e0f25517-ae0c-3af9-a910-b8c05b4436ff.jpg)\r\n## Shark简介 [![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html) [![Join the chat at https://gitter.im/gaoxianglong/shark](https://badges.gitter.im/gaoxianglong/shark.svg)](https://gitter.im/gaoxianglong/shark?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![GitHub release](https://img.shields.io/github/release/gaoxianglong/shark.svg)](https://github.com/gaoxianglong/shark/releases) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.sharksharding/shark/badge.svg)](http://search.maven.org/#artifactdetails%7Ccom.sharksharding%7Cshark%7C1.3.8%7Cjar/)\r\n\r\n轻量级的分布式mysql分库分表中间件，丰富、灵活的sharding路由算法支持，能够方便DBA实现库的水平扩容和降低数据迁移成本。shark站在巨人的肩膀上(springjdbc、druid)，采用与应用集成架构，放弃通用性，只为换取更好的执行性能与降低分布式环境下外围系统的宕机风险。<br>\r\n\r\n- [用户指南](https://github.com/gaoxianglong/shark/wiki/%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97)<br>\r\n- [基准测试](https://github.com/gaoxianglong/shark/wiki/shark-benchmark-result)<br>\r\n\r\n----------\r\n\r\n## Shark的优点\r\n- 具备丰富、完善的技术文档支持；<br>\r\n- 动态数据源的无缝切换；<br>\r\n- master/slave一主一从读写分离；<br>\r\n- sharding路由算法丰富、灵活，支持2类4种分布式分片算法；<br>\r\n- 非proxy架构，与应用集成，应用直连数据库，降低外围系统依赖所带来的宕机风险；<br>\r\n- 友好支持mysql数据库；<br>\r\n- 使用简单，侵入性低，站在巨人的肩膀上，依赖于springjdbc、druid；<br>\r\n- 基于druid的sqlparser完成sql解析任务，解析性能高效、稳定；<br>\r\n- 对springjdbc进行功能增强，大幅度提升编码效率；<br>\r\n- 提供多机sequenceid的API支持，解决多机sequenceid难题；<br>\r\n- 支持基于zookeeper、redis3.x cluster作为集中式资源配置中心；<br>\r\n- 基于velocity模板引擎渲染内容，支持sql语句独立配置和动态拼接，与业务逻辑代码解耦；<br>\r\n- 提供内置验证页面，方便开发、测试及运维人员对执行后的sql进行验证；<br>\r\n- 单线程读重试(取决于的数据库连接池是否支持)；<br>\r\n- 提供自动生成配置文件的API支持，降低配置出错率；<br>\r\n- 专注于sharding领域，无需兼容通用性，因此核心代码量少、易读易维护；<br>\r\n\r\n----------\r\n\r\n## Shark的分片模型\r\n##### Shark支持2类4种分布式分片算法：\r\n- 库内分片类型：\r\n  - 片名连续的库内分片算法；\r\n  - 非片名连续的库内分片算法；\r\n- 一库一片类型：\r\n  - 片名连续的一库一片算法；\r\n  - 非片名连续的一库一片算法；\r\n\r\n----------\r\n\r\n## Shark总体架构\r\nShark采用应用集成架构，其领域模型位于持久层(JdbcTemplate)和JDBC之间，也就是分布式数据路由层。<br>\r\n![](http://dl.iteye.com/upload/picture/pic/135419/0cd4a534-3a06-36d7-9aef-9ce469d3e8c7.jpg)\r\n\r\n----------\r\n\r\n## Shark与其它Sharding中间件功能对比\r\n我们并不认为Shark是最优秀的，但却始终坚信Shark是最好用的。\r\n\r\n| 功能          | Cobar         | Mycat         | Heisenberg     | Shark          | TDDL          | Sharding-JDBC |\r\n| ------------- | ------------- | ------------- | -------------- | -------------- | ------------- | ------------- |\r\n| 是否开源      | 开源          | 开源          | 开源           | 开源           | 部分开源      | 开源          |\r\n| 架构模型      | Proxy架构     | Proxy架构     | Proxy架构      | 应用集成架构   | 应用集成架构  | 应用集成架构  |\r\n| 分布式分片    | 支持          | 支持          | 支持           | 支持           | 支持          | 支持          |\r\n| 数据库支持    | MySQL         | 任意          | 任意           | MySQL          | 任意          | MySQL         |\r\n| 外围依赖      | 无            | 无            | 无             | 无             | Diamond       | 无            |\r\n| 使用复杂度    | 一般          | 一般          | 一般           | 简单           | 复杂          | 一般          |\r\n| 技术文档支持  | 较少          | 付费          | 较少           | 丰富           | 无            | 一般          |\r\n\r\n----------\r\n\r\n## Shark的使用注意事项\r\n- 不支持强一致性的分布式事务，建议在业务层依赖MQ，保证最终数据一致性；\r\n- 不建议、不支持多表查询，所有多表查询sql，务必全部打散为单条sql逐条执行；\r\n- sql语句的第一个参数务必是shard key；\r\n- shard key必须是整数类型；\r\n\r\n----------\r\n\r\n## 学习 & 联系我们\r\n- wiki：https://github.com/gaoxianglong/shark/wiki\r\n- issues：https://github.com/gaoxianglong/shark/issues\r\n- blog：http://gao-xianglong.iteye.com\r\n- email：gao_xianglong@sharksharding.com\r\n- ![](http://dl.iteye.com/upload/picture/pic/134683/97e5d3af-cb7b-3115-97c1-230cbf6ad081.png)qq group：150445731\r\n\r\n----------\r\n\r\n## 典型案例\r\n![](http://dl.iteye.com/upload/picture/pic/135357/01760d0f-d0ff-3606-ac9c-1d99f94f0e30.jpg)\r\n\r\n----------\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}